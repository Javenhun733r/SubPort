// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(191)
  email           String           @unique @db.VarChar(191)
  password        String
  role            Role             @default(USER)
  authorRequests  AuthorRequest[]
  Author Author[]
  isVerified      Boolean          @default(false)
  ChatUser ChatUser[]
  balance      Decimal  @default(0.00) @db.Decimal(10, 2)
  Message Message[]

  Chat Chat[]
  TierSubscription TierSubscription[]

  Comment Comment[]

  Withdrawal Withdrawal[]
}


enum Role {
  USER
  ADMIN
}
model AuthorRequest {
  id         Int      @id @default(autoincrement())
  username   String   @unique
  name       String
  bio        String?
  avatarFile String?
  genre      String?
  socials    Json?    // Використовуємо тип Json для збереження масиву соцмереж
  status     RequestStatus @default(PENDING)
  createdAt  DateTime @default(now())
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
}
model Author {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  name         String
  avatarUrl    String?
  bio          String?
  genre        String?
  subscribers  Int      @default(0)
  socials      Json?    // Масив об'єктів для соцмереж (Twitter, Instagram, тощо)
  posts        Post[]
  tiers        Tier[]
  userId       Int     @default(1)
  user         User    @relation(fields: [userId], references: [id])

  Chat Chat[]
}
model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String
  authorId  Int
  author    Author  @relation(fields: [authorId], references: [id])

  Comment Comment[]
}
model Tier {
  id        Int      @id @default(autoincrement())
  title     String
  price     Int
  description String
  authorId  Int
  author    Author   @relation(fields: [authorId], references: [id])
  chats       Chat[]   @relation("TierChats")
  isChat      Boolean  @default(false)
  TierSubscription TierSubscription[]
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
model Chat {
  id           Int         @id @default(autoincrement())
  name         String
  creatorId    Int          @default(1)
  creator      User        @relation(fields: [creatorId], references: [id])

  authorId     Int          @default(1)
  author       Author      @relation(fields: [authorId], references: [id])

  messages     Message[]
  participants ChatUser[]
  tierId       Int?
  tier         Tier?       @relation("TierChats", fields: [tierId], references: [id])

  createdAt DateTime @default(now())
}



model ChatUser {
  id     Int  @id @default(autoincrement())
  chat   Chat @relation(fields: [chatId], references: [id])
  chatId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([chatId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  text      String?
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    Int

  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  messageType String   @default("text")
  fileUrl     String?
  fileName    String?
  fileType    String?
  fileSize    Int?
  createdAt DateTime @default(now())
}
model TierSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  tierId    Int
  tier      Tier     @relation(fields: [tierId], references: [id])

  createdAt DateTime @default(now())
  expiresAt DateTime

  ReminderLog ReminderLog[]
}
model Comment {
  id        Int      @id @default(autoincrement())
  text      String   // Текст коментаря
  postId    Int      // Ідентифікатор поста, до якого коментар
  post      Post     @relation(fields: [postId], references: [id])
  userId    Int      // Ідентифікатор користувача, який залишив коментар
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) // Дата створення коментаря
}

model ReminderLog {
  id              Int               @id @default(autoincrement())
  subscriptionId  Int
  sentAt          DateTime          @default(now())
  subscription    TierSubscription @relation(fields: [subscriptionId], references: [id])
}
model Withdrawal {
  id              Int       @id @default(autoincrement())
  userId        Int
  user         User    @relation(fields: [userId], references: [id])
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("UAH")
  receiverCard    String
  status          String
  liqpayOrderId   String?   @unique
  liqpayPaymentId String?
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
