import { PrismaClient } from '@prisma/client';
import nodemailer from 'nodemailer';
import cron from 'node-cron';

const prisma = new PrismaClient();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ—à—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: process.env.EMAIL,
        pass: process.env.EMAIL_PASSWORD,
    },
});

const sendReminders = async () => {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    const dayAfter = new Date(tomorrow);
    dayAfter.setDate(dayAfter.getDate() + 1);

    const subscriptions = await prisma.tierSubscription.findMany({
        where: {
            expiresAt: {
                gte: tomorrow,
                lt: dayAfter,
            },
        },
        include: {
            user: true,
            tier: {
                include: {
                    author: true,
                },
            },
        },
    });

    for (const sub of subscriptions) {
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —á–∏ –≤–∂–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ subscription
        const alreadySent = await prisma.reminderLog.findFirst({
            where: { subscriptionId: sub.id },
        });
        if (alreadySent) continue;

        const to = sub.user.email;
        if (!to) continue;

        const subject = `–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${sub.tier.author.username} –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞`;
        const html = `
            <p>–ü—Ä–∏–≤—ñ—Ç, ${sub.user.name || '–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É'}!</p>
            <p>–ù–∞–≥–∞–¥—É—î–º–æ, —â–æ —Ç–≤–æ—è –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ <strong>${sub.tier.author.username}</strong> —Ä—ñ–≤–Ω—è <strong>${sub.tier.title}</strong> –∑–∞–≤–µ—Ä—à—É—î—Ç—å—Å—è <strong>–∑–∞–≤—Ç—Ä–∞</strong>.</p>
            <p>–©–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –¥–æ—Å—Ç—É–ø, —Ç–∏ –º–æ–∂–µ—à –ø–æ–Ω–æ–≤–∏—Ç–∏ —ó—ó –Ω–∞ —Å–∞–π—Ç—ñ.</p>
        `;

        try {
            await transporter.sendMail({ from: process.env.EMAIL_USER, to, subject, html });
            console.log(`üìß Email sent to ${to}`);

            // –ó–∞–ø–∏—Å —É –ª–æ–≥
            await prisma.reminderLog.create({
                data: { subscriptionId: sub.id },
            });
        } catch (err) {
            console.error(`‚ùå Failed to send email to ${to}:`, err.message);
        }
    }
};
const handleExpiredSubscriptions = async () => {
    console.log('Running task: handleExpiredSubscriptions...');

    // 1. –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏, —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó —è–∫–∏—Ö –≤–∂–µ –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è
    const expiredSubscriptions = await prisma.tierSubscription.findMany({
        where: {
            expiresAt: {
                lt: new Date() // –î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –º–µ–Ω—à–∞ –∑–∞ –ø–æ—Ç–æ—á–Ω—É
            }
        },
        include: {
            tier: {
                include: {
                    chats: {
                        select: { id: true }
                    }
                }
            }
        }
    });

    if (expiredSubscriptions.length === 0) {
        console.log('No expired subscriptions to process.');
        return;
    }

    console.log(`Found ${expiredSubscriptions.length} expired subscriptions to process.`);

    for (const sub of expiredSubscriptions) {
        const { userId, tier, id: subscriptionId } = sub;
        const chat = tier?.chats[0];


        if (tier && tier.isChat && chat) {
            try {
                await prisma.chatUser.delete({
                    where: {
                        chatId_userId: {
                            chatId: chat.id,
                            userId: userId
                        }
                    }
                });
                console.log(`‚úÖ User ${userId} removed from chat ${chat.id} for expired sub ${subscriptionId}.`);
            } catch (error) {
                if (error.code === 'P2025') {
                    console.log(`üü° User ${userId} was already not in chat ${chat.id}.`);
                } else {
                    console.error(`‚ùå Failed to remove user ${userId} from chat ${chat.id}. Error:`, error);
                    continue;
                }
            }
        }

        await prisma.tierSubscription.delete({
            where: { id: subscriptionId }
        });
        console.log(`üóëÔ∏è Expired subscription record ${subscriptionId} deleted.`);
    }
};
cron.schedule('0 10 * * *', async () => {
    console.log('‚è∞ Starting daily subscription maintenance job...');

    try {
        await handleExpiredSubscriptions();
    } catch(err) {
        console.error("‚ùå CRITICAL ERROR in handleExpiredSubscriptions:", err);
    }
    try {
        await sendReminders();
    } catch(err) {
        console.error("‚ùå CRITICAL ERROR in sendReminders:", err);
    }

    console.log('‚úÖ Daily subscription maintenance job finished.');
}, {
    timezone: "Europe/Kiev"
});


